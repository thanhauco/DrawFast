
import { z } from 'zod';

export const PointSchema = z.object({
  x: z.number().describe('The x-coordinate of the point.'),
  y: z.number().describe('The y-coordinate of the point.'),
});
export type Point = z.infer<typeof PointSchema>;

export const ShapeStyleSchema = z.object({
  strokeColor: z.string().regex(/^#(?:[0-9a-fA-F]{3}){1,2}$|^transparent$/, 'Invalid hex color or transparent').describe('The color of the stroke, e.g., "#RRGGBB" or "transparent".'),
  fillColor: z.string().regex(/^#(?:[0-9a-fA-F]{3}){1,2}$|^transparent$/, 'Invalid hex color or transparent').describe('The fill color of the shape, e.g., "#RRGGBB" or "transparent".'),
  strokeWidth: z.number().min(0).describe('The width of the stroke in pixels.'),
  fontSize: z.number().min(1).describe('The font size for text shapes, in pixels.'),
  fontFamily: z.string().describe('The font family for text shapes, e.g., "Arial, sans-serif".'),
});
export type ShapeStyle = z.infer<typeof ShapeStyleSchema>;

export const BaseShapeSchema = z.object({
  id: z.string().uuid().describe('A unique identifier for the shape (UUID).'),
  // type will be narrowed by specific shape schemas
  style: ShapeStyleSchema.describe('The styling properties for the shape.'),
  x: z.number().describe('The primary x-coordinate of the shape (e.g., top-left for rectangle, center for circle, start for text).'),
  y: z.number().describe('The primary y-coordinate of the shape (e.g., top-left for rectangle, center for circle, start for text).'),
  width: z.number().optional().describe('The width of the shape (for rectangle, or estimated for text).'),
  height: z.number().optional().describe('The height of the shape (for rectangle, or estimated for text).'),
  points: z.array(PointSchema).optional().describe('An array of points, used for lines and arrows. Typically [startPoint, endPoint].'),
  radius: z.number().optional().describe('The radius of the shape (for circles).'),
  text: z.string().optional().describe('The text content (for text shapes).'),
  selected: z.boolean().optional().describe('Whether the shape is currently selected.'),
  rotation: z.number().optional().describe('The rotation angle of the shape in degrees.'),
});

export const RectangleShapeSchema = BaseShapeSchema.extend({
  type: z.literal('rectangle'),
  width: z.number().min(0).describe('The width of the rectangle.'),
  height: z.number().min(0).describe('The height of the rectangle.'),
});
export type RectangleShape = z.infer<typeof RectangleShapeSchema>;

export const CircleShapeSchema = BaseShapeSchema.extend({
  type: z.literal('circle'),
  radius: z.number().min(0).describe('The radius of the circle.'),
});
export type CircleShape = z.infer<typeof CircleShapeSchema>;

export const LineShapeSchema = BaseShapeSchema.extend({
  type: z.literal('line'),
  points: z.tuple([PointSchema, PointSchema]).describe('The start and end points of the line.'),
});
export type LineShape = z.infer<typeof LineShapeSchema>;

export const ArrowShapeSchema = BaseShapeSchema.extend({
  type: z.literal('arrow'),
  points: z.tuple([PointSchema, PointSchema]).describe('The start and end points of the arrow.'),
});
export type ArrowShape = z.infer<typeof ArrowShapeSchema>;

export const TextShapeSchema = BaseShapeSchema.extend({
  type: z.literal('text'),
  text: z.string().describe('The text content.'),
});
export type TextShape = z.infer<typeof TextShapeSchema>;

export const DrawingShapeSchema = z.union([
  RectangleShapeSchema,
  CircleShapeSchema,
  LineShapeSchema,
  ArrowShapeSchema,
  TextShapeSchema,
]).describe('A single drawable shape on the canvas. It can be a rectangle, circle, line, arrow, or text.');
export type DrawingShape = z.infer<typeof DrawingShapeSchema>;

// Schema for the AI flow input
export const AiPromptInputSchema = z.object({
  prompt: z.string().describe('The user\'s text prompt for generating content.'),
});
export type AiPromptInput = z.infer<typeof AiPromptInputSchema>;

// Schema for the AI flow output
export const AiGeneratedShapesSchema = z.object({
  shapes: z.array(DrawingShapeSchema).describe('An array of shapes generated by the AI.'),
});
export type AiGeneratedShapes = z.infer<typeof AiGeneratedShapesSchema>;
